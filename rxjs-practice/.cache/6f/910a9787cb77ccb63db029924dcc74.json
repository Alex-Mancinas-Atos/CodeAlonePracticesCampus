{"id":"node_modules/rxjs/src/internal/util/reportUnhandledError.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../config","loc":{"line":4,"column":25,"index":144},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\reportUnhandledError.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\config.ts"},{"name":"../scheduler/timeoutProvider","loc":{"line":5,"column":34,"index":193},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\reportUnhandledError.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\scheduler\\timeoutProvider.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.reportUnhandledError = void 0;\r\nconst config_1 = require(\"../config\");\r\nconst timeoutProvider_1 = require(\"../scheduler/timeoutProvider\");\r\nfunction reportUnhandledError(err) {\r\n    timeoutProvider_1.timeoutProvider.setTimeout(() => {\r\n        const { onUnhandledError } = config_1.config;\r\n        if (onUnhandledError) {\r\n            onUnhandledError(err);\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    });\r\n}\r\nexports.reportUnhandledError = reportUnhandledError;\r\n"},"sourceMaps":{"js":{"version":3,"file":"reportUnhandledError.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/util/reportUnhandledError.ts"],"names":[],"mappings":";;;AAAA,sCAAmC;AACnC,kEAA+D;AAW/D,SAAgB,oBAAoB,CAAC,GAAQ;IAC3C,iCAAe,CAAC,UAAU,CAAC,GAAG,EAAE;QAC9B,MAAM,EAAE,gBAAgB,EAAE,GAAG,eAAM,CAAC;QACpC,IAAI,gBAAgB,EAAE;YAEpB,gBAAgB,CAAC,GAAG,CAAC,CAAC;SACvB;aAAM;YAEL,MAAM,GAAG,CAAC;SACX;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAXD,oDAWC","sourcesContent":["import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n"]}},"error":null,"hash":"4113a0afc00b1d571434a0ba18c65bbf","cacheData":{"env":{}}}
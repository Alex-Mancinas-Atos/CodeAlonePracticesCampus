{"id":"node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../Scheduler","loc":{"line":4,"column":28,"index":141},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\scheduler\\AsyncScheduler.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Scheduler.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AsyncScheduler = void 0;\r\nconst Scheduler_1 = require(\"../Scheduler\");\r\nclass AsyncScheduler extends Scheduler_1.Scheduler {\r\n    actions = [];\r\n    _active = false;\r\n    _scheduled = undefined;\r\n    constructor(SchedulerAction, now = Scheduler_1.Scheduler.now) {\r\n        super(SchedulerAction, now);\r\n    }\r\n    flush(action) {\r\n        const { actions } = this;\r\n        if (this._active) {\r\n            actions.push(action);\r\n            return;\r\n        }\r\n        let error;\r\n        this._active = true;\r\n        do {\r\n            if ((error = action.execute(action.state, action.delay))) {\r\n                break;\r\n            }\r\n        } while ((action = actions.shift()));\r\n        this._active = false;\r\n        if (error) {\r\n            while ((action = actions.shift())) {\r\n                action.unsubscribe();\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n}\r\nexports.AsyncScheduler = AsyncScheduler;\r\n"},"sourceMaps":{"js":{"version":3,"file":"AsyncScheduler.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAIzC,MAAa,cAAe,SAAQ,qBAAS;IACpC,OAAO,GAA4B,EAAE,CAAC;IAOtC,OAAO,GAAY,KAAK,CAAC;IAQzB,UAAU,GAAQ,SAAS,CAAC;IAEnC,YAAY,eAA8B,EAAE,MAAoB,qBAAS,CAAC,GAAG;QAC3E,KAAK,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,MAAwB;QACnC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEzB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrB,OAAO;SACR;QAED,IAAI,KAAU,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,GAAG;YACD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;gBACxD,MAAM;aACP;SACF,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,EAAG,CAAC,EAAE;QAEtC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAErB,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,EAAG,CAAC,EAAE;gBAClC,MAAM,CAAC,WAAW,EAAE,CAAC;aACtB;YACD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF;AAhDD,wCAgDC","sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]}},"error":null,"hash":"e8c6b3e761e698e72af4af0b4f077e35","cacheData":{"env":{}}}
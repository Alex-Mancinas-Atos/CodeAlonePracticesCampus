{"id":"node_modules/rxjs/src/internal/util/lift.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"./isFunction","loc":{"line":4,"column":29,"index":153},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\lift.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\isFunction.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.operate = exports.hasLift = void 0;\r\nconst isFunction_1 = require(\"./isFunction\");\r\nfunction hasLift(source) {\r\n    return (0, isFunction_1.isFunction)(source?.lift);\r\n}\r\nexports.hasLift = hasLift;\r\nfunction operate(init) {\r\n    return (source) => {\r\n        if (hasLift(source)) {\r\n            return source.lift(function (liftedSource) {\r\n                try {\r\n                    return init(liftedSource, this);\r\n                }\r\n                catch (err) {\r\n                    this.error(err);\r\n                }\r\n            });\r\n        }\r\n        throw new TypeError('Unable to lift unknown Observable type');\r\n    };\r\n}\r\nexports.operate = operate;\r\n"},"sourceMaps":{"js":{"version":3,"file":"lift.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/util/lift.ts"],"names":[],"mappings":";;;AAGA,6CAA0C;AAK1C,SAAgB,OAAO,CAAC,MAAW;IACjC,OAAO,IAAA,uBAAU,EAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAClC,CAAC;AAFD,0BAEC;AAMD,SAAgB,OAAO,CACrB,IAAqF;IAErF,OAAO,CAAC,MAAqB,EAAE,EAAE;QAC/B,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;YACnB,OAAO,MAAM,CAAC,IAAI,CAAC,UAA+B,YAA2B;gBAC3E,IAAI;oBACF,OAAO,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;iBACjC;gBAAC,OAAO,GAAG,EAAE;oBACZ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACjB;YACH,CAAC,CAAC,CAAC;SACJ;QACD,MAAM,IAAI,SAAS,CAAC,wCAAwC,CAAC,CAAC;IAChE,CAAC,CAAC;AACJ,CAAC;AAfD,0BAeC","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n"]}},"error":null,"hash":"463d8899a7eeb3c0cb76f3d88504d5b9","cacheData":{"env":{}}}
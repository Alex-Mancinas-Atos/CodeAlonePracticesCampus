{"id":"node_modules/rxjs/src/internal/observable/fromSubscribable.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../Observable","loc":{"line":4,"column":29,"index":144},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\fromSubscribable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Observable.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromSubscribable = void 0;\r\nconst Observable_1 = require(\"../Observable\");\r\nfunction fromSubscribable(subscribable) {\r\n    return new Observable_1.Observable((subscriber) => subscribable.subscribe(subscriber));\r\n}\r\nexports.fromSubscribable = fromSubscribable;\r\n"},"sourceMaps":{"js":{"version":3,"file":"fromSubscribable.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/observable/fromSubscribable.ts"],"names":[],"mappings":";;;AAAA,8CAA2C;AAc3C,SAAgB,gBAAgB,CAAI,YAA6B;IAC/D,OAAO,IAAI,uBAAU,CAAC,CAAC,UAAyB,EAAE,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;AAC3F,CAAC;AAFD,4CAEC","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscribable } from '../types';\n\n/**\n * Used to convert a subscribable to an observable.\n *\n * Currently, this is only used within internals.\n *\n * TODO: Discuss ObservableInput supporting \"Subscribable\".\n * https://github.com/ReactiveX/rxjs/issues/5909\n *\n * @param subscribable A subscribable\n */\nexport function fromSubscribable<T>(subscribable: Subscribable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => subscribable.subscribe(subscriber));\n}\n"]}},"error":null,"hash":"29d01e7073122575f6d0fd541a5f8920","cacheData":{"env":{}}}
{"id":"node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../operators/map","loc":{"line":4,"column":22,"index":137},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\mapOneOrManyArgs.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\map.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.mapOneOrManyArgs = void 0;\r\nconst map_1 = require(\"../operators/map\");\r\nconst { isArray } = Array;\r\nfunction callOrApply(fn, args) {\r\n    return isArray(args) ? fn(...args) : fn(args);\r\n}\r\nfunction mapOneOrManyArgs(fn) {\r\n    return (0, map_1.map)(args => callOrApply(fn, args));\r\n}\r\nexports.mapOneOrManyArgs = mapOneOrManyArgs;\r\n"},"sourceMaps":{"js":{"version":3,"file":"mapOneOrManyArgs.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts"],"names":[],"mappings":";;;AACA,0CAAuC;AAEvC,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;AAE1B,SAAS,WAAW,CAAO,EAA2B,EAAE,IAAW;IAC/D,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AAClD,CAAC;AAMD,SAAgB,gBAAgB,CAAO,EAA2B;IAC9D,OAAO,IAAA,SAAG,EAAC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAA;AAC7C,CAAC;AAFD,4CAEC","sourcesContent":["import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}"]}},"error":null,"hash":"6adf0a35b1c7cc877f6a1cc58758eb23","cacheData":{"env":{}}}
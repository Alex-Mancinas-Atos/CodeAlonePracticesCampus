{"id":"node_modules/rxjs/src/internal/operators/ignoreElements.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../util/lift","loc":{"line":4,"column":23,"index":136},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\ignoreElements.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\lift.ts"},{"name":"./OperatorSubscriber","loc":{"line":5,"column":37,"index":191},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\ignoreElements.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\OperatorSubscriber.ts"},{"name":"../util/noop","loc":{"line":6,"column":23,"index":240},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\ignoreElements.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\noop.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ignoreElements = void 0;\r\nconst lift_1 = require(\"../util/lift\");\r\nconst OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\r\nconst noop_1 = require(\"../util/noop\");\r\nfunction ignoreElements() {\r\n    return (0, lift_1.operate)((source, subscriber) => {\r\n        source.subscribe((0, OperatorSubscriber_1.createOperatorSubscriber)(subscriber, noop_1.noop));\r\n    });\r\n}\r\nexports.ignoreElements = ignoreElements;\r\n"},"sourceMaps":{"js":{"version":3,"file":"ignoreElements.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/operators/ignoreElements.ts"],"names":[],"mappings":";;;AACA,uCAAuC;AACvC,6DAAgE;AAChE,uCAAoC;AAqCpC,SAAgB,cAAc;IAC5B,OAAO,IAAA,cAAO,EAAC,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;QACpC,MAAM,CAAC,SAAS,CAAC,IAAA,6CAAwB,EAAC,UAAU,EAAE,WAAI,CAAC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,wCAIC","sourcesContent":["import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * The `ignoreElements` operator suppresses all items emitted by the source Observable,\n * but allows its termination notification (either `error` or `complete`) to pass through unchanged.\n *\n * If you do not care about the items being emitted by an Observable, but you do want to be notified\n * when it completes or when it terminates with an error, you can apply the `ignoreElements` operator\n * to the Observable, which will ensure that it will never call its observersâ€™ `next` handlers.\n *\n * ## Example\n *\n * Ignore all `next` emissions from the source\n *\n * ```ts\n * import { of, ignoreElements } from 'rxjs';\n *\n * of('you', 'talking', 'to', 'me')\n *   .pipe(ignoreElements())\n *   .subscribe({\n *     next: word => console.log(word),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // result:\n * // 'the end'\n * ```\n *\n * @return A function that returns an empty Observable that only calls\n * `complete` or `error`, based on which one is called by the source\n * Observable.\n */\nexport function ignoreElements(): OperatorFunction<unknown, never> {\n  return operate((source, subscriber) => {\n    source.subscribe(createOperatorSubscriber(subscriber, noop));\n  });\n}\n"]}},"error":null,"hash":"40d422026f07295f6ccb6cd68426a69b","cacheData":{"env":{}}}
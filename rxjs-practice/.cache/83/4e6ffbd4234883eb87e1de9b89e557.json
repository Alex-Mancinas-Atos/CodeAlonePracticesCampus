{"id":"node_modules/rxjs/src/internal/util/createErrorClass.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createErrorClass = void 0;\r\nfunction createErrorClass(createImpl) {\r\n    const _super = (instance) => {\r\n        Error.call(instance);\r\n        instance.stack = new Error().stack;\r\n    };\r\n    const ctorFunc = createImpl(_super);\r\n    ctorFunc.prototype = Object.create(Error.prototype);\r\n    ctorFunc.prototype.constructor = ctorFunc;\r\n    return ctorFunc;\r\n}\r\nexports.createErrorClass = createErrorClass;\r\n"},"sourceMaps":{"js":{"version":3,"file":"createErrorClass.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/util/createErrorClass.ts"],"names":[],"mappings":";;;AASA,SAAgB,gBAAgB,CAAI,UAAgC;IAClE,MAAM,MAAM,GAAG,CAAC,QAAa,EAAE,EAAE;QAC/B,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrB,QAAQ,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;IACrC,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IACpC,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACpD,QAAQ,CAAC,SAAS,CAAC,WAAW,GAAG,QAAQ,CAAC;IAC1C,OAAO,QAAQ,CAAC;AAClB,CAAC;AAVD,4CAUC","sourcesContent":["/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n"]}},"error":null,"hash":"177c4130120aa22cf10a342ead8c797a","cacheData":{"env":{}}}
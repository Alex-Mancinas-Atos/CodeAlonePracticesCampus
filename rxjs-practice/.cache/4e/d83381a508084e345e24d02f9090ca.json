{"id":"node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../Observable","loc":{"line":4,"column":29,"index":149},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\ConnectableObservable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Observable.ts"},{"name":"../Subscription","loc":{"line":5,"column":31,"index":199},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\ConnectableObservable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subscription.ts"},{"name":"../operators/refCount","loc":{"line":6,"column":27,"index":247},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\ConnectableObservable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\refCount.ts"},{"name":"../operators/OperatorSubscriber","loc":{"line":7,"column":37,"index":311},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\ConnectableObservable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\OperatorSubscriber.ts"},{"name":"../util/lift","loc":{"line":8,"column":23,"index":371},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\ConnectableObservable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\lift.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConnectableObservable = void 0;\r\nconst Observable_1 = require(\"../Observable\");\r\nconst Subscription_1 = require(\"../Subscription\");\r\nconst refCount_1 = require(\"../operators/refCount\");\r\nconst OperatorSubscriber_1 = require(\"../operators/OperatorSubscriber\");\r\nconst lift_1 = require(\"../util/lift\");\r\nclass ConnectableObservable extends Observable_1.Observable {\r\n    source;\r\n    subjectFactory;\r\n    _subject = null;\r\n    _refCount = 0;\r\n    _connection = null;\r\n    constructor(source, subjectFactory) {\r\n        super();\r\n        this.source = source;\r\n        this.subjectFactory = subjectFactory;\r\n        if ((0, lift_1.hasLift)(source)) {\r\n            this.lift = source.lift;\r\n        }\r\n    }\r\n    _subscribe(subscriber) {\r\n        return this.getSubject().subscribe(subscriber);\r\n    }\r\n    getSubject() {\r\n        const subject = this._subject;\r\n        if (!subject || subject.isStopped) {\r\n            this._subject = this.subjectFactory();\r\n        }\r\n        return this._subject;\r\n    }\r\n    _teardown() {\r\n        this._refCount = 0;\r\n        const { _connection } = this;\r\n        this._subject = this._connection = null;\r\n        _connection?.unsubscribe();\r\n    }\r\n    connect() {\r\n        let connection = this._connection;\r\n        if (!connection) {\r\n            connection = this._connection = new Subscription_1.Subscription();\r\n            const subject = this.getSubject();\r\n            connection.add(this.source.subscribe((0, OperatorSubscriber_1.createOperatorSubscriber)(subject, undefined, () => {\r\n                this._teardown();\r\n                subject.complete();\r\n            }, (err) => {\r\n                this._teardown();\r\n                subject.error(err);\r\n            }, () => this._teardown())));\r\n            if (connection.closed) {\r\n                this._connection = null;\r\n                connection = Subscription_1.Subscription.EMPTY;\r\n            }\r\n        }\r\n        return connection;\r\n    }\r\n    refCount() {\r\n        return (0, refCount_1.refCount)()(this);\r\n    }\r\n}\r\nexports.ConnectableObservable = ConnectableObservable;\r\n"},"sourceMaps":{"js":{"version":3,"file":"ConnectableObservable.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":";;;AACA,8CAA2C;AAE3C,kDAA+C;AAC/C,oDAAwE;AACxE,wEAA2E;AAC3E,uCAAuC;AASvC,MAAa,qBAAyB,SAAQ,uBAAa;IAgBtC;IAAiC;IAf1C,QAAQ,GAAsB,IAAI,CAAC;IACnC,SAAS,GAAW,CAAC,CAAC;IACtB,WAAW,GAAwB,IAAI,CAAC;IAalD,YAAmB,MAAqB,EAAY,cAAgC;QAClF,KAAK,EAAE,CAAC;QADS,WAAM,GAAN,MAAM,CAAe;QAAY,mBAAc,GAAd,cAAc,CAAkB;QAKlF,IAAI,IAAA,cAAO,EAAC,MAAM,CAAC,EAAE;YACnB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;SACzB;IACH,CAAC;IAGS,UAAU,CAAC,UAAyB;QAC5C,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACjD,CAAC;IAES,UAAU;QAClB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,SAAS,EAAE;YACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;SACvC;QACD,OAAO,IAAI,CAAC,QAAS,CAAC;IACxB,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxC,WAAW,EAAE,WAAW,EAAE,CAAC;IAC7B,CAAC;IAMD,OAAO;QACL,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAClC,IAAI,CAAC,UAAU,EAAE;YACf,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,2BAAY,EAAE,CAAC;YACnD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,UAAU,CAAC,GAAG,CACZ,IAAI,CAAC,MAAM,CAAC,SAAS,CACnB,IAAA,6CAAwB,EACtB,OAAc,EACd,SAAS,EACT,GAAG,EAAE;gBACH,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,OAAO,CAAC,QAAQ,EAAE,CAAC;YACrB,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;gBACN,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,EACD,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CACvB,CACF,CACF,CAAC;YAEF,IAAI,UAAU,CAAC,MAAM,EAAE;gBACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,UAAU,GAAG,2BAAY,CAAC,KAAK,CAAC;aACjC;SACF;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAMD,QAAQ;QACN,OAAO,IAAA,mBAAmB,GAAE,CAAC,IAAI,CAAkB,CAAC;IACtD,CAAC;CACF;AAxFD,sDAwFC","sourcesContent":["import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          createOperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n"]}},"error":null,"hash":"f7f5ef3644f491cb26c55edda7e5bfc3","cacheData":{"env":{}}}
{"id":"node_modules/rxjs/src/internal/operators/delay.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../scheduler/async","loc":{"line":4,"column":24,"index":128},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\delay.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\scheduler\\async.ts"},{"name":"./delayWhen","loc":{"line":5,"column":28,"index":180},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\delay.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\delayWhen.ts"},{"name":"../observable/timer","loc":{"line":6,"column":24,"index":221},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\delay.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\timer.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.delay = void 0;\r\nconst async_1 = require(\"../scheduler/async\");\r\nconst delayWhen_1 = require(\"./delayWhen\");\r\nconst timer_1 = require(\"../observable/timer\");\r\nfunction delay(due, scheduler = async_1.asyncScheduler) {\r\n    const duration = (0, timer_1.timer)(due, scheduler);\r\n    return (0, delayWhen_1.delayWhen)(() => duration);\r\n}\r\nexports.delay = delay;\r\n"},"sourceMaps":{"js":{"version":3,"file":"delay.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/operators/delay.ts"],"names":[],"mappings":";;;AAAA,8CAAoD;AAEpD,2CAAwC;AACxC,+CAA4C;AA0D5C,SAAgB,KAAK,CAAI,GAAkB,EAAE,YAA2B,sBAAc;IACpF,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IACvC,OAAO,IAAA,qBAAS,EAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC;AACnC,CAAC;AAHD,sBAGC","sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.svg)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n *\n * Delay each click by one second\n *\n * ```ts\n * import { fromEvent, delay } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n *\n * ```ts\n * import { fromEvent, delay } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link delayWhen}\n * @see {@link throttle}\n * @see {@link throttleTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link audit}\n * @see {@link auditTime}\n *\n * @param {number|Date} due The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified timeout or Date.\n */\nexport function delay<T>(due: number | Date, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  const duration = timer(due, scheduler);\n  return delayWhen(() => duration);\n}\n"]}},"error":null,"hash":"9afe712254956772e729b751a22d2faa","cacheData":{"env":{}}}
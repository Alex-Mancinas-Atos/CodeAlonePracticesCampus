{"id":"node_modules/rxjs/src/internal/operators/zipWith.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"./zip","loc":{"line":4,"column":22,"index":128},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\zipWith.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\zip.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.zipWith = void 0;\r\nconst zip_1 = require(\"./zip\");\r\nfunction zipWith(...otherInputs) {\r\n    return (0, zip_1.zip)(...otherInputs);\r\n}\r\nexports.zipWith = zipWith;\r\n"},"sourceMaps":{"js":{"version":3,"file":"zipWith.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/operators/zipWith.ts"],"names":[],"mappings":";;;AACA,+BAA4B;AAyB5B,SAAgB,OAAO,CAAkC,GAAG,WAAyC;IACnG,OAAO,IAAA,SAAG,EAAC,GAAG,WAAW,CAAC,CAAC;AAC7B,CAAC;AAFD,0BAEC","sourcesContent":["import { ObservableInputTuple, OperatorFunction, Cons } from '../types';\nimport { zip } from './zip';\n\n/**\n * Subscribes to the source, and the observable inputs provided as arguments, and combines their values, by index, into arrays.\n *\n * What is meant by \"combine by index\": The first value from each will be made into a single array, then emitted,\n * then the second value from each will be combined into a single array and emitted, then the third value\n * from each will be combined into a single array and emitted, and so on.\n *\n * This will continue until it is no longer able to combine values of the same index into an array.\n *\n * After the last value from any one completed source is emitted in an array, the resulting observable will complete,\n * as there is no way to continue \"zipping\" values together by index.\n *\n * Use-cases for this operator are limited. There are memory concerns if one of the streams is emitting\n * values at a much faster rate than the others. Usage should likely be limited to streams that emit\n * at a similar pace, or finite streams of known length.\n *\n * In many cases, authors want `combineLatestWith` and not `zipWith`.\n *\n * @param otherInputs other observable inputs to collate values from.\n * @return A function that returns an Observable that emits items by index\n * combined from the source Observable and provided Observables, in form of an\n * array.\n */\nexport function zipWith<T, A extends readonly unknown[]>(...otherInputs: [...ObservableInputTuple<A>]): OperatorFunction<T, Cons<T, A>> {\n  return zip(...otherInputs);\n}\n"]}},"error":null,"hash":"0ec7e90e7fabf610262d62e75fb43fab","cacheData":{"env":{}}}
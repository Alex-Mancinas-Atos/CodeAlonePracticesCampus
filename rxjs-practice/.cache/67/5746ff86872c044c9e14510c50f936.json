{"id":"node_modules/rxjs/src/internal/util/isInteropObservable.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../symbol/observable","loc":{"line":4,"column":29,"index":147},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\isInteropObservable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\symbol\\observable.ts"},{"name":"./isFunction","loc":{"line":5,"column":29,"index":202},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\isInteropObservable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\isFunction.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isInteropObservable = void 0;\r\nconst observable_1 = require(\"../symbol/observable\");\r\nconst isFunction_1 = require(\"./isFunction\");\r\nfunction isInteropObservable(input) {\r\n    return (0, isFunction_1.isFunction)(input[observable_1.observable]);\r\n}\r\nexports.isInteropObservable = isInteropObservable;\r\n"},"sourceMaps":{"js":{"version":3,"file":"isInteropObservable.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/util/isInteropObservable.ts"],"names":[],"mappings":";;;AACA,qDAAuE;AACvE,6CAA0C;AAG1C,SAAgB,mBAAmB,CAAC,KAAU;IAC5C,OAAO,IAAA,uBAAU,EAAC,KAAK,CAAC,uBAAiB,CAAC,CAAC,CAAC;AAC9C,CAAC;AAFD,kDAEC","sourcesContent":["import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n"]}},"error":null,"hash":"f9e6af94c0404ed8543af17a864c6d47","cacheData":{"env":{}}}
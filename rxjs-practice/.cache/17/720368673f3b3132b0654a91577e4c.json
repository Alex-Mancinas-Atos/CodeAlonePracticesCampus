{"id":"node_modules/rxjs/src/internal/operators/zipAll.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../observable/zip","loc":{"line":4,"column":22,"index":127},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\zipAll.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\zip.ts"},{"name":"./joinAllInternals","loc":{"line":5,"column":35,"index":185},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\zipAll.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\joinAllInternals.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.zipAll = void 0;\r\nconst zip_1 = require(\"../observable/zip\");\r\nconst joinAllInternals_1 = require(\"./joinAllInternals\");\r\nfunction zipAll(project) {\r\n    return (0, joinAllInternals_1.joinAllInternals)(zip_1.zip, project);\r\n}\r\nexports.zipAll = zipAll;\r\n"},"sourceMaps":{"js":{"version":3,"file":"zipAll.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/operators/zipAll.ts"],"names":[],"mappings":";;;AACA,2CAAwC;AACxC,yDAAsD;AAetD,SAAgB,MAAM,CAAO,OAA+B;IAC1D,OAAO,IAAA,mCAAgB,EAAC,SAAG,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC;AAFD,wBAEC","sourcesContent":["import { OperatorFunction, ObservableInput } from '../types';\nimport { zip } from '../observable/zip';\nimport { joinAllInternals } from './joinAllInternals';\n\n/**\n * Collects all observable inner sources from the source, once the source completes,\n * it will subscribe to all inner sources, combining their values by index and emitting\n * them.\n *\n * @see {@link zipWith}\n * @see {@link zip}\n */\nexport function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function zipAll<T>(): OperatorFunction<any, T[]>;\nexport function zipAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function zipAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n\nexport function zipAll<T, R>(project?: (...values: T[]) => R) {\n  return joinAllInternals(zip, project);\n}\n"]}},"error":null,"hash":"9b8097bf47f6618a9251542efc69ac5c","cacheData":{"env":{}}}
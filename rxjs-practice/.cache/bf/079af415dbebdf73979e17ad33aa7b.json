{"id":"node_modules/rxjs/src/internal/operators/onErrorResumeNext.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../util/lift","loc":{"line":4,"column":23,"index":139},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\onErrorResumeNext.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\lift.ts"},{"name":"../observable/innerFrom","loc":{"line":5,"column":28,"index":185},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\onErrorResumeNext.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\innerFrom.ts"},{"name":"../util/argsOrArgArray","loc":{"line":6,"column":33,"index":247},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\onErrorResumeNext.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\argsOrArgArray.ts"},{"name":"./OperatorSubscriber","loc":{"line":7,"column":37,"index":312},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\onErrorResumeNext.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\OperatorSubscriber.ts"},{"name":"../util/noop","loc":{"line":8,"column":23,"index":361},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\onErrorResumeNext.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\noop.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.onErrorResumeNext = void 0;\r\nconst lift_1 = require(\"../util/lift\");\r\nconst innerFrom_1 = require(\"../observable/innerFrom\");\r\nconst argsOrArgArray_1 = require(\"../util/argsOrArgArray\");\r\nconst OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\r\nconst noop_1 = require(\"../util/noop\");\r\nfunction onErrorResumeNext(...sources) {\r\n    const nextSources = (0, argsOrArgArray_1.argsOrArgArray)(sources);\r\n    return (0, lift_1.operate)((source, subscriber) => {\r\n        const remaining = [source, ...nextSources];\r\n        const subscribeNext = () => {\r\n            if (!subscriber.closed) {\r\n                if (remaining.length > 0) {\r\n                    let nextSource;\r\n                    try {\r\n                        nextSource = (0, innerFrom_1.innerFrom)(remaining.shift());\r\n                    }\r\n                    catch (err) {\r\n                        subscribeNext();\r\n                        return;\r\n                    }\r\n                    const innerSub = (0, OperatorSubscriber_1.createOperatorSubscriber)(subscriber, undefined, noop_1.noop, noop_1.noop);\r\n                    nextSource.subscribe(innerSub);\r\n                    innerSub.add(subscribeNext);\r\n                }\r\n                else {\r\n                    subscriber.complete();\r\n                }\r\n            }\r\n        };\r\n        subscribeNext();\r\n    });\r\n}\r\nexports.onErrorResumeNext = onErrorResumeNext;\r\n"},"sourceMaps":{"js":{"version":3,"file":"onErrorResumeNext.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/operators/onErrorResumeNext.ts"],"names":[],"mappings":";;;AAEA,uCAAuC;AACvC,uDAAoD;AACpD,2DAAwD;AACxD,6DAAgE;AAChE,uCAAoC;AAiFpC,SAAgB,iBAAiB,CAC/B,GAAG,OAAsE;IAMzE,MAAM,WAAW,GAAG,IAAA,+BAAc,EAAC,OAAO,CAAuC,CAAC;IAElF,OAAO,IAAA,cAAO,EAAC,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;QACpC,MAAM,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,CAAC;QAC3C,MAAM,aAAa,GAAG,GAAG,EAAE;YACzB,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACtB,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACxB,IAAI,UAAiC,CAAC;oBACtC,IAAI;wBACF,UAAU,GAAG,IAAA,qBAAS,EAAC,SAAS,CAAC,KAAK,EAAG,CAAC,CAAC;qBAC5C;oBAAC,OAAO,GAAG,EAAE;wBACZ,aAAa,EAAE,CAAC;wBAChB,OAAO;qBACR;oBAMD,MAAM,QAAQ,GAAG,IAAA,6CAAwB,EAAC,UAAU,EAAE,SAAS,EAAE,WAAI,EAAE,WAAI,CAAC,CAAC;oBAC7E,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBAC/B,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;iBAC7B;qBAAM;oBACL,UAAU,CAAC,QAAQ,EAAE,CAAC;iBACvB;aACF;QACH,CAAC,CAAC;QAEF,aAAa,EAAE,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC;AArCD,8CAqCC","sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  sources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]>;\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  ...sources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]>;\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables, subscribes to next one on error or complete.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\n *\n *\n * ## Example\n *\n * Subscribe to the next Observable after map fails\n *\n * ```ts\n * import { of, onErrorResumeNext, map } from 'rxjs';\n *\n * of(1, 2, 3, 0)\n *   .pipe(\n *     map(x => {\n *       if (x === 0) {\n *         throw Error();\n *       }\n *\n *       return 10 / x;\n *     }),\n *     onErrorResumeNext(of(1, 2, 3))\n *   )\n *   .subscribe({\n *     next: val => console.log(val),\n *     error: err => console.log(err),          // Will never be called.\n *     complete: () => console.log('that\\'s it!')\n *   });\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // 'that's it!'\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} sources Observables passed either directly or as an array.\n * @return A function that returns an Observable that emits values from source\n * Observable, but - if it errors - subscribes to the next passed Observable\n * and so on, until it completes or runs out of Observables.\n */\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  // For some reason, TS 4.1 RC gets the inference wrong here and infers the\n  // result to be `A[number][]` - completely dropping the ObservableInput part\n  // of the type. This makes no sense whatsoever. As a workaround, the type is\n  // asserted explicitly.\n  const nextSources = argsOrArgArray(sources) as unknown as ObservableInputTuple<A>;\n\n  return operate((source, subscriber) => {\n    const remaining = [source, ...nextSources];\n    const subscribeNext = () => {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          let nextSource: Observable<A[number]>;\n          try {\n            nextSource = innerFrom(remaining.shift()!);\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          // Here we have to use one of our Subscribers, or it does not wire up\n          // The `closed` property of upstream Subscribers synchronously, that\n          // would result in situation were we could not stop a synchronous firehose\n          // with something like `take(3)`.\n          const innerSub = createOperatorSubscriber(subscriber, undefined, noop, noop);\n          nextSource.subscribe(innerSub);\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}\n"]}},"error":null,"hash":"fadf223319052dbafc0fefecf038650b","cacheData":{"env":{}}}
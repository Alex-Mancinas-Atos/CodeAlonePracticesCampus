{"id":"node_modules/rxjs/src/internal/Subject.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"./Observable","loc":{"line":4,"column":29,"index":162},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subject.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Observable.ts"},{"name":"./Subscription","loc":{"line":5,"column":31,"index":211},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subject.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subscription.ts"},{"name":"./util/ObjectUnsubscribedError","loc":{"line":6,"column":42,"index":273},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subject.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\ObjectUnsubscribedError.ts"},{"name":"./util/arrRemove","loc":{"line":7,"column":28,"index":337},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subject.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\arrRemove.ts"},{"name":"./util/errorContext","loc":{"line":8,"column":31,"index":390},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subject.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\errorContext.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AnonymousSubject = exports.Subject = void 0;\r\nconst Observable_1 = require(\"./Observable\");\r\nconst Subscription_1 = require(\"./Subscription\");\r\nconst ObjectUnsubscribedError_1 = require(\"./util/ObjectUnsubscribedError\");\r\nconst arrRemove_1 = require(\"./util/arrRemove\");\r\nconst errorContext_1 = require(\"./util/errorContext\");\r\nclass Subject extends Observable_1.Observable {\r\n    closed = false;\r\n    currentObservers = null;\r\n    observers = [];\r\n    isStopped = false;\r\n    hasError = false;\r\n    thrownError = null;\r\n    static create = (destination, source) => {\r\n        return new AnonymousSubject(destination, source);\r\n    };\r\n    constructor() {\r\n        super();\r\n    }\r\n    lift(operator) {\r\n        const subject = new AnonymousSubject(this, this);\r\n        subject.operator = operator;\r\n        return subject;\r\n    }\r\n    _throwIfClosed() {\r\n        if (this.closed) {\r\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\r\n        }\r\n    }\r\n    next(value) {\r\n        (0, errorContext_1.errorContext)(() => {\r\n            this._throwIfClosed();\r\n            if (!this.isStopped) {\r\n                if (!this.currentObservers) {\r\n                    this.currentObservers = Array.from(this.observers);\r\n                }\r\n                for (const observer of this.currentObservers) {\r\n                    observer.next(value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    error(err) {\r\n        (0, errorContext_1.errorContext)(() => {\r\n            this._throwIfClosed();\r\n            if (!this.isStopped) {\r\n                this.hasError = this.isStopped = true;\r\n                this.thrownError = err;\r\n                const { observers } = this;\r\n                while (observers.length) {\r\n                    observers.shift().error(err);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    complete() {\r\n        (0, errorContext_1.errorContext)(() => {\r\n            this._throwIfClosed();\r\n            if (!this.isStopped) {\r\n                this.isStopped = true;\r\n                const { observers } = this;\r\n                while (observers.length) {\r\n                    observers.shift().complete();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    unsubscribe() {\r\n        this.isStopped = this.closed = true;\r\n        this.observers = this.currentObservers = null;\r\n    }\r\n    get observed() {\r\n        return this.observers?.length > 0;\r\n    }\r\n    _trySubscribe(subscriber) {\r\n        this._throwIfClosed();\r\n        return super._trySubscribe(subscriber);\r\n    }\r\n    _subscribe(subscriber) {\r\n        this._throwIfClosed();\r\n        this._checkFinalizedStatuses(subscriber);\r\n        return this._innerSubscribe(subscriber);\r\n    }\r\n    _innerSubscribe(subscriber) {\r\n        const { hasError, isStopped, observers } = this;\r\n        if (hasError || isStopped) {\r\n            return Subscription_1.EMPTY_SUBSCRIPTION;\r\n        }\r\n        this.currentObservers = null;\r\n        observers.push(subscriber);\r\n        return new Subscription_1.Subscription(() => {\r\n            this.currentObservers = null;\r\n            (0, arrRemove_1.arrRemove)(observers, subscriber);\r\n        });\r\n    }\r\n    _checkFinalizedStatuses(subscriber) {\r\n        const { hasError, thrownError, isStopped } = this;\r\n        if (hasError) {\r\n            subscriber.error(thrownError);\r\n        }\r\n        else if (isStopped) {\r\n            subscriber.complete();\r\n        }\r\n    }\r\n    asObservable() {\r\n        const observable = new Observable_1.Observable();\r\n        observable.source = this;\r\n        return observable;\r\n    }\r\n}\r\nexports.Subject = Subject;\r\nclass AnonymousSubject extends Subject {\r\n    destination;\r\n    constructor(destination, source) {\r\n        super();\r\n        this.destination = destination;\r\n        this.source = source;\r\n    }\r\n    next(value) {\r\n        this.destination?.next?.(value);\r\n    }\r\n    error(err) {\r\n        this.destination?.error?.(err);\r\n    }\r\n    complete() {\r\n        this.destination?.complete?.();\r\n    }\r\n    _subscribe(subscriber) {\r\n        return this.source?.subscribe(subscriber) ?? Subscription_1.EMPTY_SUBSCRIPTION;\r\n    }\r\n}\r\nexports.AnonymousSubject = AnonymousSubject;\r\n"},"sourceMaps":{"js":{"version":3,"file":"Subject.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/Subject.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n"]}},"error":null,"hash":"02bdf5daa6da890c1fd4db14d9468dd9","cacheData":{"env":{}}}
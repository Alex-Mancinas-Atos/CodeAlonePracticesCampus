{"id":"node_modules/rxjs/src/internal/Subscription.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"./util/isFunction","loc":{"line":4,"column":29,"index":194},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subscription.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\isFunction.ts"},{"name":"./util/UnsubscriptionError","loc":{"line":5,"column":38,"index":255},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subscription.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\UnsubscriptionError.ts"},{"name":"./util/arrRemove","loc":{"line":6,"column":28,"index":315},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Subscription.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\arrRemove.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isSubscription = exports.EMPTY_SUBSCRIPTION = exports.Subscription = void 0;\r\nconst isFunction_1 = require(\"./util/isFunction\");\r\nconst UnsubscriptionError_1 = require(\"./util/UnsubscriptionError\");\r\nconst arrRemove_1 = require(\"./util/arrRemove\");\r\nclass Subscription {\r\n    initialTeardown;\r\n    static EMPTY = (() => {\r\n        const empty = new Subscription();\r\n        empty.closed = true;\r\n        return empty;\r\n    })();\r\n    closed = false;\r\n    _parentage = null;\r\n    _finalizers = null;\r\n    constructor(initialTeardown) {\r\n        this.initialTeardown = initialTeardown;\r\n    }\r\n    unsubscribe() {\r\n        let errors;\r\n        if (!this.closed) {\r\n            this.closed = true;\r\n            const { _parentage } = this;\r\n            if (_parentage) {\r\n                this._parentage = null;\r\n                if (Array.isArray(_parentage)) {\r\n                    for (const parent of _parentage) {\r\n                        parent.remove(this);\r\n                    }\r\n                }\r\n                else {\r\n                    _parentage.remove(this);\r\n                }\r\n            }\r\n            const { initialTeardown: initialFinalizer } = this;\r\n            if ((0, isFunction_1.isFunction)(initialFinalizer)) {\r\n                try {\r\n                    initialFinalizer();\r\n                }\r\n                catch (e) {\r\n                    errors = e instanceof UnsubscriptionError_1.UnsubscriptionError ? e.errors : [e];\r\n                }\r\n            }\r\n            const { _finalizers } = this;\r\n            if (_finalizers) {\r\n                this._finalizers = null;\r\n                for (const finalizer of _finalizers) {\r\n                    try {\r\n                        execFinalizer(finalizer);\r\n                    }\r\n                    catch (err) {\r\n                        errors = errors ?? [];\r\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\r\n                            errors = [...errors, ...err.errors];\r\n                        }\r\n                        else {\r\n                            errors.push(err);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (errors) {\r\n                throw new UnsubscriptionError_1.UnsubscriptionError(errors);\r\n            }\r\n        }\r\n    }\r\n    add(teardown) {\r\n        if (teardown && teardown !== this) {\r\n            if (this.closed) {\r\n                execFinalizer(teardown);\r\n            }\r\n            else {\r\n                if (teardown instanceof Subscription) {\r\n                    if (teardown.closed || teardown._hasParent(this)) {\r\n                        return;\r\n                    }\r\n                    teardown._addParent(this);\r\n                }\r\n                (this._finalizers = this._finalizers ?? []).push(teardown);\r\n            }\r\n        }\r\n    }\r\n    _hasParent(parent) {\r\n        const { _parentage } = this;\r\n        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\r\n    }\r\n    _addParent(parent) {\r\n        const { _parentage } = this;\r\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\r\n    }\r\n    _removeParent(parent) {\r\n        const { _parentage } = this;\r\n        if (_parentage === parent) {\r\n            this._parentage = null;\r\n        }\r\n        else if (Array.isArray(_parentage)) {\r\n            (0, arrRemove_1.arrRemove)(_parentage, parent);\r\n        }\r\n    }\r\n    remove(teardown) {\r\n        const { _finalizers } = this;\r\n        _finalizers && (0, arrRemove_1.arrRemove)(_finalizers, teardown);\r\n        if (teardown instanceof Subscription) {\r\n            teardown._removeParent(this);\r\n        }\r\n    }\r\n}\r\nexports.Subscription = Subscription;\r\nexports.EMPTY_SUBSCRIPTION = Subscription.EMPTY;\r\nfunction isSubscription(value) {\r\n    return (value instanceof Subscription ||\r\n        (value && 'closed' in value && (0, isFunction_1.isFunction)(value.remove) && (0, isFunction_1.isFunction)(value.add) && (0, isFunction_1.isFunction)(value.unsubscribe)));\r\n}\r\nexports.isSubscription = isSubscription;\r\nfunction execFinalizer(finalizer) {\r\n    if ((0, isFunction_1.isFunction)(finalizer)) {\r\n        finalizer();\r\n    }\r\n    else {\r\n        finalizer.unsubscribe();\r\n    }\r\n}\r\n"},"sourceMaps":{"js":{"version":3,"file":"Subscription.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/Subscription.ts"],"names":[],"mappings":"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","sourcesContent":["import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the finalization\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown: initialFinalizer } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _finalizers } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The finalization logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the finalizer if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever finalizer is handed to it automatically.\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = this._finalizers ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All finalizer instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The finalizer to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _finalizers } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n"]}},"error":null,"hash":"d81a9158129adb90abf339a0d3b6743c","cacheData":{"env":{}}}
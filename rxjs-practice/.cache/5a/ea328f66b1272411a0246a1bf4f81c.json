{"id":"node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../Observable","loc":{"line":4,"column":29,"index":144},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleIterable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\Observable.ts"},{"name":"../symbol/iterator","loc":{"line":5,"column":27,"index":190},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleIterable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\symbol\\iterator.ts"},{"name":"../util/isFunction","loc":{"line":6,"column":29,"index":243},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleIterable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\isFunction.ts"},{"name":"../util/executeSchedule","loc":{"line":7,"column":34,"index":301},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleIterable.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\executeSchedule.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.scheduleIterable = void 0;\r\nconst Observable_1 = require(\"../Observable\");\r\nconst iterator_1 = require(\"../symbol/iterator\");\r\nconst isFunction_1 = require(\"../util/isFunction\");\r\nconst executeSchedule_1 = require(\"../util/executeSchedule\");\r\nfunction scheduleIterable(input, scheduler) {\r\n    return new Observable_1.Observable((subscriber) => {\r\n        let iterator;\r\n        (0, executeSchedule_1.executeSchedule)(subscriber, scheduler, () => {\r\n            iterator = input[iterator_1.iterator]();\r\n            (0, executeSchedule_1.executeSchedule)(subscriber, scheduler, () => {\r\n                let value;\r\n                let done;\r\n                try {\r\n                    ({ value, done } = iterator.next());\r\n                }\r\n                catch (err) {\r\n                    subscriber.error(err);\r\n                    return;\r\n                }\r\n                if (done) {\r\n                    subscriber.complete();\r\n                }\r\n                else {\r\n                    subscriber.next(value);\r\n                }\r\n            }, 0, true);\r\n        });\r\n        return () => (0, isFunction_1.isFunction)(iterator?.return) && iterator.return();\r\n    });\r\n}\r\nexports.scheduleIterable = scheduleIterable;\r\n"},"sourceMaps":{"js":{"version":3,"file":"scheduleIterable.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts"],"names":[],"mappings":";;;AAAA,8CAA2C;AAE3C,iDAAiE;AACjE,mDAAgD;AAChD,6DAA0D;AAO1D,SAAgB,gBAAgB,CAAI,KAAkB,EAAE,SAAwB;IAC9E,OAAO,IAAI,uBAAU,CAAI,CAAC,UAAU,EAAE,EAAE;QACtC,IAAI,QAAwB,CAAC;QAK7B,IAAA,iCAAe,EAAC,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE;YAE1C,QAAQ,GAAI,KAAa,CAAC,mBAAe,CAAC,EAAE,CAAC;YAE7C,IAAA,iCAAe,EACb,UAAU,EACV,SAAS,EACT,GAAG,EAAE;gBACH,IAAI,KAAQ,CAAC;gBACb,IAAI,IAAyB,CAAC;gBAC9B,IAAI;oBAEF,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;iBACrC;gBAAC,OAAO,GAAG,EAAE;oBAEZ,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACtB,OAAO;iBACR;gBAED,IAAI,IAAI,EAAE;oBAKR,UAAU,CAAC,QAAQ,EAAE,CAAC;iBACvB;qBAAM;oBAEL,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACxB;YACH,CAAC,EACD,CAAC,EACD,IAAI,CACL,CAAC;QACJ,CAAC,CAAC,CAAC;QAMH,OAAO,GAAG,EAAE,CAAC,IAAA,uBAAU,EAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC;AAhDD,4CAgDC","sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n"]}},"error":null,"hash":"e85ed42b364c137cbb51b8a8375bfc75","cacheData":{"env":{}}}
{"id":"node_modules/rxjs/src/internal/util/errorContext.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../config","loc":{"line":4,"column":25,"index":159},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\errorContext.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\config.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.captureError = exports.errorContext = void 0;\r\nconst config_1 = require(\"../config\");\r\nlet context = null;\r\nfunction errorContext(cb) {\r\n    if (config_1.config.useDeprecatedSynchronousErrorHandling) {\r\n        const isRoot = !context;\r\n        if (isRoot) {\r\n            context = { errorThrown: false, error: null };\r\n        }\r\n        cb();\r\n        if (isRoot) {\r\n            const { errorThrown, error } = context;\r\n            context = null;\r\n            if (errorThrown) {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        cb();\r\n    }\r\n}\r\nexports.errorContext = errorContext;\r\nfunction captureError(err) {\r\n    if (config_1.config.useDeprecatedSynchronousErrorHandling && context) {\r\n        context.errorThrown = true;\r\n        context.error = err;\r\n    }\r\n}\r\nexports.captureError = captureError;\r\n"},"sourceMaps":{"js":{"version":3,"file":"errorContext.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/util/errorContext.ts"],"names":[],"mappings":";;;AAAA,sCAAmC;AAEnC,IAAI,OAAO,GAAgD,IAAI,CAAC;AAShE,SAAgB,YAAY,CAAC,EAAc;IACzC,IAAI,eAAM,CAAC,qCAAqC,EAAE;QAChD,MAAM,MAAM,GAAG,CAAC,OAAO,CAAC;QACxB,IAAI,MAAM,EAAE;YACV,OAAO,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;SAC/C;QACD,EAAE,EAAE,CAAC;QACL,IAAI,MAAM,EAAE;YACV,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,OAAQ,CAAC;YACxC,OAAO,GAAG,IAAI,CAAC;YACf,IAAI,WAAW,EAAE;gBACf,MAAM,KAAK,CAAC;aACb;SACF;KACF;SAAM;QAGL,EAAE,EAAE,CAAC;KACN;AACH,CAAC;AAnBD,oCAmBC;AAMD,SAAgB,YAAY,CAAC,GAAQ;IACnC,IAAI,eAAM,CAAC,qCAAqC,IAAI,OAAO,EAAE;QAC3D,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;QAC3B,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;KACrB;AACH,CAAC;AALD,oCAKC","sourcesContent":["import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n"]}},"error":null,"hash":"a4dda8c5d3583a6df159d0ae29371c8c","cacheData":{"env":{}}}
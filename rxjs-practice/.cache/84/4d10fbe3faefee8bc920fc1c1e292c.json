{"id":"node_modules/rxjs/src/internal/operators/joinAllInternals.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../util/identity","loc":{"line":4,"column":27,"index":142},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\joinAllInternals.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\identity.ts"},{"name":"../util/mapOneOrManyArgs","loc":{"line":5,"column":35,"index":199},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\joinAllInternals.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\mapOneOrManyArgs.ts"},{"name":"../util/pipe","loc":{"line":6,"column":23,"index":252},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\joinAllInternals.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\util\\pipe.ts"},{"name":"./mergeMap","loc":{"line":7,"column":27,"index":297},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\joinAllInternals.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\mergeMap.ts"},{"name":"./toArray","loc":{"line":8,"column":26,"index":339},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\joinAllInternals.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\toArray.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.joinAllInternals = void 0;\r\nconst identity_1 = require(\"../util/identity\");\r\nconst mapOneOrManyArgs_1 = require(\"../util/mapOneOrManyArgs\");\r\nconst pipe_1 = require(\"../util/pipe\");\r\nconst mergeMap_1 = require(\"./mergeMap\");\r\nconst toArray_1 = require(\"./toArray\");\r\nfunction joinAllInternals(joinFn, project) {\r\n    return (0, pipe_1.pipe)((0, toArray_1.toArray)(), (0, mergeMap_1.mergeMap)((sources) => joinFn(sources)), project ? (0, mapOneOrManyArgs_1.mapOneOrManyArgs)(project) : identity_1.identity);\r\n}\r\nexports.joinAllInternals = joinAllInternals;\r\n"},"sourceMaps":{"js":{"version":3,"file":"joinAllInternals.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/operators/joinAllInternals.ts"],"names":[],"mappings":";;;AAEA,+CAA4C;AAC5C,+DAA4D;AAC5D,uCAAoC;AACpC,yCAAsC;AACtC,uCAAoC;AAYpC,SAAgB,gBAAgB,CAAO,MAAwD,EAAE,OAA+B;IAC9H,OAAO,IAAA,WAAI,EAGT,IAAA,iBAAO,GAAgE,EAEvE,IAAA,mBAAQ,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAEtC,OAAO,CAAC,CAAC,CAAC,IAAA,mCAAgB,EAAC,OAAO,CAAC,CAAC,CAAC,CAAE,mBAAgB,CACxD,CAAC;AACJ,CAAC;AAVD,4CAUC","sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { mergeMap } from './mergeMap';\nimport { toArray } from './toArray';\n\n/**\n * Collects all of the inner sources from source observable. Then, once the\n * source completes, joins the values using the given static.\n *\n * This is used for {@link combineLatestAll} and {@link zipAll} which both have the\n * same behavior of collecting all inner observables, then operating on them.\n *\n * @param joinFn The type of static join to apply to the sources collected\n * @param project The projection function to apply to the values, if any\n */\nexport function joinAllInternals<T, R>(joinFn: (sources: ObservableInput<T>[]) => Observable<T>, project?: (...args: any[]) => R) {\n  return pipe(\n    // Collect all inner sources into an array, and emit them when the\n    // source completes.\n    toArray() as OperatorFunction<ObservableInput<T>, ObservableInput<T>[]>,\n    // Run the join function on the collected array of inner sources.\n    mergeMap((sources) => joinFn(sources)),\n    // If a projection function was supplied, apply it to each result.\n    project ? mapOneOrManyArgs(project) : (identity as any)\n  );\n}\n"]}},"error":null,"hash":"580904d08a8196867b7fee7a9cbbbfc3","cacheData":{"env":{}}}
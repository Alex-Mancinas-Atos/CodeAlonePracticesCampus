{"id":"node_modules/rxjs/src/internal/operators/throttleTime.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../scheduler/async","loc":{"line":4,"column":24,"index":135},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\throttleTime.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\scheduler\\async.ts"},{"name":"./throttle","loc":{"line":5,"column":27,"index":186},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\throttleTime.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\throttle.ts"},{"name":"../observable/timer","loc":{"line":6,"column":24,"index":226},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\throttleTime.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\timer.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.throttleTime = void 0;\r\nconst async_1 = require(\"../scheduler/async\");\r\nconst throttle_1 = require(\"./throttle\");\r\nconst timer_1 = require(\"../observable/timer\");\r\nfunction throttleTime(duration, scheduler = async_1.asyncScheduler, config = throttle_1.defaultThrottleConfig) {\r\n    const duration$ = (0, timer_1.timer)(duration, scheduler);\r\n    return (0, throttle_1.throttle)(() => duration$, config);\r\n}\r\nexports.throttleTime = throttleTime;\r\n"},"sourceMaps":{"js":{"version":3,"file":"throttleTime.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/operators/throttleTime.ts"],"names":[],"mappings":";;;AAAA,8CAAoD;AACpD,yCAA6D;AAE7D,+CAA4C;AAmD5C,SAAgB,YAAY,CAC1B,QAAgB,EAChB,YAA2B,sBAAc,EACzC,MAAM,GAAG,gCAAqB;IAE9B,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC7C,OAAO,IAAA,mBAAQ,EAAC,GAAG,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,CAAC;AAPD,oCAOC","sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { defaultThrottleConfig, throttle } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { timer } from '../observable/timer';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * ![](throttleTime.png)\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link SchedulerLike} for managing timers.\n *\n * ## Examples\n *\n * ### Limit click rate\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, throttleTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttleTime(1000));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param scheduler The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling. Defaults to {@link asyncScheduler}.\n * @param config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return A function that returns an Observable that performs the throttle\n * operation to limit the rate of emissions from the source.\n */\nexport function throttleTime<T>(\n  duration: number,\n  scheduler: SchedulerLike = asyncScheduler,\n  config = defaultThrottleConfig\n): MonoTypeOperatorFunction<T> {\n  const duration$ = timer(duration, scheduler);\n  return throttle(() => duration$, config);\n}\n"]}},"error":null,"hash":"61ee4515fc0d9a301ba7037cb4f8bd59","cacheData":{"env":{}}}
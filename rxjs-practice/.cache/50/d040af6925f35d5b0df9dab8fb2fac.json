{"id":"node_modules/rxjs/src/internal/operators/publishBehavior.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644},{"name":"../BehaviorSubject","loc":{"line":4,"column":34,"index":148},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\publishBehavior.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\BehaviorSubject.ts"},{"name":"../observable/ConnectableObservable","loc":{"line":5,"column":40,"index":212},"parent":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\operators\\publishBehavior.ts","resolved":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\src\\internal\\observable\\ConnectableObservable.ts"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.publishBehavior = void 0;\r\nconst BehaviorSubject_1 = require(\"../BehaviorSubject\");\r\nconst ConnectableObservable_1 = require(\"../observable/ConnectableObservable\");\r\nfunction publishBehavior(initialValue) {\r\n    return (source) => {\r\n        const subject = new BehaviorSubject_1.BehaviorSubject(initialValue);\r\n        return new ConnectableObservable_1.ConnectableObservable(source, () => subject);\r\n    };\r\n}\r\nexports.publishBehavior = publishBehavior;\r\n"},"sourceMaps":{"js":{"version":3,"file":"publishBehavior.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/operators/publishBehavior.ts"],"names":[],"mappings":";;;AACA,wDAAqD;AACrD,+EAA4E;AAiB5E,SAAgB,eAAe,CAAI,YAAe;IAEhD,OAAO,CAAC,MAAM,EAAE,EAAE;QAChB,MAAM,OAAO,GAAG,IAAI,iCAAe,CAAI,YAAY,CAAC,CAAC;QACrD,OAAO,IAAI,6CAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC;AACJ,CAAC;AAND,0CAMC","sourcesContent":["import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n\n/**\n * Creates a {@link ConnectableObservable} that utilizes a {@link BehaviorSubject}.\n *\n * @param initialValue The initial value passed to the {@link BehaviorSubject}.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable that uses a\n * {@link BehaviorSubject} under the hood, use {@link connectable}.\n * `source.pipe(publishBehavior(initValue))` is equivalent to\n * `connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publishBehavior`, use the {@link share} operator instead.\n * `source.pipe(publishBehavior(initValue), refCount())` is equivalent to\n * `source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishBehavior<T>(initialValue: T): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  // Note that this has *never* supported the selector function.\n  return (source) => {\n    const subject = new BehaviorSubject<T>(initialValue);\n    return new ConnectableObservable(source, () => subject);\n  };\n}\n"]}},"error":null,"hash":"708817c7510ba29912c833e5f0646a7d","cacheData":{"env":{}}}
{"id":"node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts","dependencies":[{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\tsconfig.json","includedInParent":true,"mtime":1658249596656},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\package.json","includedInParent":true,"mtime":1658249837276},{"name":"C:\\Users\\a875232\\Documents\\rxjs-practice\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1658249596644}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.timeoutProvider = void 0;\r\nexports.timeoutProvider = {\r\n    setTimeout(handler, timeout, ...args) {\r\n        const { delegate } = exports.timeoutProvider;\r\n        if (delegate?.setTimeout) {\r\n            return delegate.setTimeout(handler, timeout, ...args);\r\n        }\r\n        return setTimeout(handler, timeout, ...args);\r\n    },\r\n    clearTimeout(handle) {\r\n        const { delegate } = exports.timeoutProvider;\r\n        return (delegate?.clearTimeout || clearTimeout)(handle);\r\n    },\r\n    delegate: undefined,\r\n};\r\n"},"sourceMaps":{"js":{"version":3,"file":"timeoutProvider.js","sourceRoot":"","sources":["node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts"],"names":[],"mappings":";;;AAea,QAAA,eAAe,GAAoB;IAG9C,UAAU,CAAC,OAAmB,EAAE,OAAgB,EAAE,GAAG,IAAI;QACvD,MAAM,EAAE,QAAQ,EAAE,GAAG,uBAAe,CAAC;QACrC,IAAI,QAAQ,EAAE,UAAU,EAAE;YACxB,OAAO,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;SACvD;QACD,OAAO,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IAC/C,CAAC;IACD,YAAY,CAAC,MAAM;QACjB,MAAM,EAAE,QAAQ,EAAE,GAAG,uBAAe,CAAC;QACrC,OAAO,CAAC,QAAQ,EAAE,YAAY,IAAI,YAAY,CAAC,CAAC,MAAa,CAAC,CAAC;IACjE,CAAC;IACD,QAAQ,EAAE,SAAS;CACpB,CAAC","sourcesContent":["import type { TimerHandle } from './timerHandle';\ntype SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearTimeoutFunction = (handle: TimerHandle) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle as any);\n  },\n  delegate: undefined,\n};\n"]}},"error":null,"hash":"034c50cd940b01e240dc4fe6fc8d19bc","cacheData":{"env":{}}}